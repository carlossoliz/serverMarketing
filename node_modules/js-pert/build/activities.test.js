"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const activities_1 = __importStar(require("./activities"));
const network_test_1 = require("./network.test");
exports.activitiesParams = {
    A: {
        expectedTime: 6,
        variance: 0.1111111111111111,
    },
    B: {
        expectedTime: 3,
        variance: 0.4444444444444444,
    },
    C: {
        expectedTime: 4,
        variance: 1,
    },
    D: {
        expectedTime: 2,
        variance: 0.1111111111111111,
    },
    E: {
        expectedTime: 3,
        variance: 1.7777777777777777,
    },
    F: {
        expectedTime: 5,
        variance: 1.7777777777777777,
    },
    G: {
        expectedTime: 3,
        variance: 1,
    },
    H: {
        expectedTime: 5,
        variance: 1,
    },
    I: {
        expectedTime: 5,
        variance: 1,
    },
    J: {
        expectedTime: 3,
        variance: 1,
    },
};
test('get expectedTime and variance', () => {
    expect(activities_1.default(network_test_1.activities)).toEqual(exports.activitiesParams);
});
test('given an existing node, return the expectedTime', () => {
    expect(activities_1.getExpectedTimeByNode('A', exports.activitiesParams)).toBe(6);
});
test('given a non existing node, return 0', () => {
    expect(activities_1.getExpectedTimeByNode('wrongActivity', exports.activitiesParams)).toBe(0);
});
//# sourceMappingURL=activities.test.js.map