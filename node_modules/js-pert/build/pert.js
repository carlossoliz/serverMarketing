"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const network_1 = __importStar(require("./network"));
const times_1 = __importStar(require("./times"));
const activities_1 = __importStar(require("./activities"));
const round_1 = __importStar(require("./round"));
const criticalPath_1 = __importDefault(require("./criticalPath"));
const getPERT = (activities) => {
    const activitiesParams = activities_1.default(activities);
    const network = network_1.default(activities);
    const earliestFinishTimes = times_1.default({
        network,
        currentNode: network_1.END,
        foundTimes: { [network_1.START]: 0 },
        activitiesParams,
        type: 'forward',
    });
    const latestStartTimes = times_1.default({
        network,
        currentNode: network_1.START,
        foundTimes: { [network_1.END]: earliestFinishTimes[network_1.END] },
        activitiesParams,
        type: 'backward',
    });
    const earliestStartTimes = times_1.mutate({
        times: earliestFinishTimes,
        mutate: (time, nodeId) => round_1.default(time - activities_1.getExpectedTimeByNode(nodeId, activitiesParams), round_1.PRECISION),
    });
    const latestFinishTimes = times_1.mutate({
        times: latestStartTimes,
        mutate: (time, nodeId) => round_1.default(time + activities_1.getExpectedTimeByNode(nodeId, activitiesParams), round_1.PRECISION),
    });
    const slack = times_1.mutate({
        times: latestStartTimes,
        mutate: (time, nodeId) => round_1.default(time - earliestStartTimes[nodeId], round_1.PRECISION),
    });
    const criticalPath = criticalPath_1.default(network, slack);
    return {
        activitiesParams,
        network,
        earliestFinishTimes,
        earliestStartTimes,
        latestStartTimes,
        latestFinishTimes,
        slack,
        criticalPath,
    };
};
exports.default = getPERT;
//# sourceMappingURL=pert.js.map