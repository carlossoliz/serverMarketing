"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const activities_1 = require("./activities");
const round_1 = __importStar(require("./round"));
exports.mutate = ({ times, mutate }) => Object.keys(times).reduce((prev, nodeId) => {
    prev[nodeId] = mutate(times[nodeId], nodeId);
    return prev;
}, {});
const find = ({ network, currentNode, foundTimes, activitiesParams, type, }) => {
    const relativesType = type === 'forward' ? 'predecessors' : 'successors';
    const takeRelative = type === 'forward' ? Math.max : Math.min;
    const combine = (accumulated, expectedTime) => type === 'forward'
        ? round_1.default(accumulated + expectedTime, round_1.PRECISION)
        : round_1.default(accumulated - expectedTime, round_1.PRECISION);
    if (foundTimes[currentNode]) {
        return foundTimes;
    }
    network[currentNode][relativesType].forEach(relative => {
        foundTimes = find({
            network,
            currentNode: relative,
            foundTimes,
            activitiesParams,
            type,
        });
    });
    const time = network[currentNode][relativesType].length
        ? takeRelative(...network[currentNode][relativesType].map(relative => foundTimes[relative]))
        : 0;
    return Object.assign({}, foundTimes, { [currentNode]: combine(time, activities_1.getExpectedTimeByNode(currentNode, activitiesParams)) });
};
exports.default = find;
//# sourceMappingURL=times.js.map