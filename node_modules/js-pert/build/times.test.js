"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const times_1 = __importStar(require("./times"));
const network_1 = require("./network");
const network_test_1 = require("./network.test");
const activities_test_1 = require("./activities.test");
const times = {
    A: 0,
    B: 6,
};
test('mutate a dictionary', () => {
    expect(times_1.mutate({
        times,
        mutate: (n, i) => 1 + n + times[i],
    })).toEqual({ A: 1, B: 13 });
});
exports.earliestFinishTimes = {
    [network_1.START]: 0,
    A: 6,
    D: 8,
    I: 13,
    B: 3,
    E: 6,
    C: 4,
    F: 9,
    H: 14,
    G: 7,
    J: 17,
    [network_1.END]: 17,
};
exports.latestStartTimes = {
    [network_1.END]: 17,
    I: 12,
    D: 10,
    A: 4,
    J: 14,
    H: 9,
    E: 6,
    B: 3,
    F: 4,
    G: 11,
    C: 0,
    [network_1.START]: 0,
};
test('find forward time serie', () => {
    expect(times_1.default({
        network: network_test_1.network,
        currentNode: network_1.END,
        foundTimes: { [network_1.START]: 0 },
        activitiesParams: activities_test_1.activitiesParams,
        type: 'forward',
    })).toEqual(exports.earliestFinishTimes);
});
test('find backward time serie', () => {
    expect(times_1.default({
        network: network_test_1.network,
        currentNode: network_1.START,
        foundTimes: { [network_1.END]: exports.earliestFinishTimes[network_1.END] },
        activitiesParams: activities_test_1.activitiesParams,
        type: 'backward',
    })).toEqual(exports.latestStartTimes);
});
//# sourceMappingURL=times.test.js.map